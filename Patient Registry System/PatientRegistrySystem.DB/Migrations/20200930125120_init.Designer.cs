// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PatientRegistrySystem.DB.Contexts;

namespace PatientRegistrySystem.DB.Migrations
{
    [DbContext(typeof(PatientContext))]
    [Migration("20200930125120_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PatientRegistrySystem.DB.Entities.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("CompanyId");

                    b.ToTable("Company");

                    b.HasData(
                        new
                        {
                            CompanyId = 1,
                            Address = "Birzeit",
                            Name = "Birzeit Pharmaceutical Manufacturing Company"
                        },
                        new
                        {
                            CompanyId = 2,
                            Address = "Ramallah and Al-Bireh",
                            Name = "Jerusalem Pharmaceuticals"
                        });
                });

            modelBuilder.Entity("PatientRegistrySystem.DB.Entities.Doctor", b =>
                {
                    b.Property<int>("DoctorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Address2")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("DoctorId");

                    b.HasIndex("UserId");

                    b.ToTable("Doctor");

                    b.HasData(
                        new
                        {
                            DoctorId = 1,
                            Address1 = "Ramallah",
                            Address2 = "Amman",
                            UserId = 3
                        });
                });

            modelBuilder.Entity("PatientRegistrySystem.DB.Entities.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("EmployeeId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("UserId");

                    b.ToTable("Employee");

                    b.HasData(
                        new
                        {
                            EmployeeId = 1,
                            Adress = "Ramallah",
                            DoctorId = 1,
                            UserId = 4
                        },
                        new
                        {
                            EmployeeId = 2,
                            Adress = "Amman",
                            DoctorId = 1,
                            UserId = 5
                        });
                });

            modelBuilder.Entity("PatientRegistrySystem.DB.Entities.Medicine", b =>
                {
                    b.Property<int>("MedicineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<int?>("PrescriptionId")
                        .HasColumnType("int");

                    b.HasKey("MedicineId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("PrescriptionId");

                    b.ToTable("Medicine");

                    b.HasData(
                        new
                        {
                            MedicineId = 1,
                            CompanyId = 1,
                            Name = "GASTREX",
                            PrescriptionId = 1
                        },
                        new
                        {
                            MedicineId = 2,
                            CompanyId = 1,
                            Name = "GASTREX",
                            PrescriptionId = 2
                        },
                        new
                        {
                            MedicineId = 3,
                            CompanyId = 2,
                            Name = "A&D Vit",
                            PrescriptionId = 2
                        });
                });

            modelBuilder.Entity("PatientRegistrySystem.DB.Entities.Prescription", b =>
                {
                    b.Property<int>("PrescriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExtraInformation")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("LabTest")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("PrescriptionId");

                    b.ToTable("Prescription");

                    b.HasData(
                        new
                        {
                            PrescriptionId = 1,
                            ExpiryDate = new DateTime(2020, 6, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExtraInformation = "GASTREX on need",
                            LabTest = "Stomach Acid Test"
                        },
                        new
                        {
                            PrescriptionId = 2,
                            ExpiryDate = new DateTime(2020, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExtraInformation = "A&D Vit	2 times ber day for 2 weeks",
                            LabTest = "Vitamins Test"
                        });
                });

            modelBuilder.Entity("PatientRegistrySystem.DB.Entities.Record", b =>
                {
                    b.Property<int>("RecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApprovedBy")
                        .HasColumnType("int");

                    b.Property<string>("Case")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExtrInfo")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<int?>("PrescriptionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("RecordId");

                    b.HasIndex("ApprovedBy");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PrescriptionId");

                    b.HasIndex("UserID");

                    b.ToTable("Record");

                    b.HasData(
                        new
                        {
                            RecordId = 1,
                            ApprovedBy = 1,
                            Case = "Heartburn",
                            DoctorId = 1,
                            EndDate = new DateTime(2020, 5, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExtrInfo = "Nothing here",
                            PrescriptionId = 1,
                            StartDate = new DateTime(2020, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            UserID = 1
                        },
                        new
                        {
                            RecordId = 2,
                            ApprovedBy = 1,
                            Case = "Pregnant needs nutritions",
                            DoctorId = 1,
                            EndDate = new DateTime(2020, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExtrInfo = "Pregnancy Vitamins",
                            PrescriptionId = 2,
                            StartDate = new DateTime(2020, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            UserID = 2
                        });
                });

            modelBuilder.Entity("PatientRegistrySystem.DB.Entities.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("RoleId");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            Name = "Patien"
                        },
                        new
                        {
                            RoleId = 2,
                            Name = "General Practitioner"
                        },
                        new
                        {
                            RoleId = 3,
                            Name = "Registration Employee"
                        },
                        new
                        {
                            RoleId = 4,
                            Name = "Accountant"
                        });
                });

            modelBuilder.Entity("PatientRegistrySystem.DB.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.HasKey("UserId");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Email = "Hussein@Shukri.com",
                            FirstName = "Hussein",
                            LastName = "Shukri",
                            Login = "1234",
                            Password = "1234",
                            Phone = "1234"
                        },
                        new
                        {
                            UserId = 2,
                            Email = "Layan@Hassan.com",
                            FirstName = "Layan",
                            LastName = "Hassan",
                            Login = "1234",
                            Password = "1234",
                            Phone = "1234"
                        },
                        new
                        {
                            UserId = 3,
                            Email = "Hamza@Kamal.com",
                            FirstName = "Hamza",
                            LastName = "Kamal",
                            Login = "1234",
                            Password = "1234",
                            Phone = "1234"
                        },
                        new
                        {
                            UserId = 4,
                            Email = "Ali@Tahboub.com",
                            FirstName = "Ali",
                            LastName = "Tahboub",
                            Login = "1234",
                            Password = "1234",
                            Phone = "1234"
                        },
                        new
                        {
                            UserId = 5,
                            Email = "Mahran@Yacoub.com",
                            FirstName = "Mahran",
                            LastName = "Yacoub",
                            Login = "1234",
                            Password = "1234",
                            Phone = "1234"
                        });
                });

            modelBuilder.Entity("PatientRegistrySystem.DB.Entities.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 5,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 5,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("PatientRegistrySystem.DB.Entities.Doctor", b =>
                {
                    b.HasOne("PatientRegistrySystem.DB.Entities.User", "User")
                        .WithMany("Doctor")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PatientRegistrySystem.DB.Entities.Employee", b =>
                {
                    b.HasOne("PatientRegistrySystem.DB.Entities.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PatientRegistrySystem.DB.Entities.User", "User")
                        .WithMany("Employee")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("PatientRegistrySystem.DB.Entities.Medicine", b =>
                {
                    b.HasOne("PatientRegistrySystem.DB.Entities.Company", "Company")
                        .WithMany("Medicine")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PatientRegistrySystem.DB.Entities.Prescription", "Prescription")
                        .WithMany("Medicines")
                        .HasForeignKey("PrescriptionId");
                });

            modelBuilder.Entity("PatientRegistrySystem.DB.Entities.Record", b =>
                {
                    b.HasOne("PatientRegistrySystem.DB.Entities.Employee", "Employee")
                        .WithMany("Record")
                        .HasForeignKey("ApprovedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PatientRegistrySystem.DB.Entities.Doctor", "Doctor")
                        .WithMany("Record")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PatientRegistrySystem.DB.Entities.Prescription", "Prescription")
                        .WithMany("Record")
                        .HasForeignKey("PrescriptionId");

                    b.HasOne("PatientRegistrySystem.DB.Entities.User", "User")
                        .WithMany("Record")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("PatientRegistrySystem.DB.Entities.UserRole", b =>
                {
                    b.HasOne("PatientRegistrySystem.DB.Entities.Role", "Role")
                        .WithMany("UserRole")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PatientRegistrySystem.DB.Entities.User", "User")
                        .WithMany("UserRole")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
